{
  "uu5 Brick": {
    "prefix": "uu5Brick",
    "scope": "javascript,typescript",
    "body": [
      "//@@viewOn:imports",
      "import { ${1:${TM_DIRECTORY/.*?(\\w*)$/${1:/pascalcase}/}} } from \"${WORKSPACE_NAME}${2:-core}\";",
      "import { withErrorBoundary } from \"uu_plus4u5g02-elements\";",
      "import { withEditMode, withMargin } from \"../core/core\";",
      "import EditModal from \"./${3:$TM_FILENAME_BASE}/edit-modal\";",
      "//@@viewOff:imports",
      "",
      "let ${4:${TM_FILENAME_BASE/([\\w]*)\\W?/${1:/pascalcase}/g}} = ${1}.${4};",
      "${4} = withMargin(${4});",
      "${4} = withEditMode(${4}, EditModal);",
      "${4} = withErrorBoundary(${4});",
      "",
      "//@@viewOn:exports",
      "export { ${4} };",
      "export default ${4};",
      "//@@viewOff:exports",
      ""
    ]
  },
  "uu5 Call": {
    "prefix": "uu5Call",
    "body": [
      "${1:name}(dtoIn, baseUri) {",
      "  let commandUri = Calls.getCommandUri(\"${2:entity/command}\", baseUri);",
      "  return Calls.call(\"${3|get,post|}\", commandUri, dtoIn);",
      "},${0}"
    ]
  },
  "uu5 Errors": {
    "prefix": "uu5Errors",
    "scope": "javascript,typescript",
    "body": [
      "import Config from \"./config/config\";",
      "import PropertyError from \"../errors/property-error\";",
      "",
      "const ERROR_PREFIX = Config.TAG.toLowerCase().replaceAll(\".\", \"-\") + \"provider/\";",
      "",
      "export class NoOidError extends PropertyError {",
      "  static code = ERROR_PREFIX + \"no-oid\";",
      "",
      "  constructor(cause) {",
      "    super(NoOidError.code, \"The required property oid is not defined!\", cause);",
      "  }",
      "}${0}",
      "",
      "export default { NoOidError };",
      ""
    ]
  },
  "uu5 Error": {
    "prefix": "uu5Error",
    "scope": "javascript,typescript",
    "body": [
      "export class ${1:MyCustom}Error extends ${2:PropertyError} {",
      "  static code = ERROR_PREFIX + \"${3:my-custom-code}\";",
      "",
      "  constructor(cause) {",
      "    super(${1}Error.code, \"${4:My custom error message}!\", cause);",
      "  }",
      "}"
    ]
  },
  "uu5 Get Attrs": {
    "prefix": "uu5GetAttrs",
    "scope": "javascript,typescript",
    "body": ["const attrs = Utils.VisualComponent.getAttrs(props${1:, className});${0}"]
  },
  "uu5 Context": {
    "prefix": "uu5Context",
    "body": [
      "//@@viewOn:imports",
      "import { Utils } from \"uu5g05\";",
      "//@@viewOff:imports",
      "",
      "export const [Context, use${1:${TM_DIRECTORY/.*?(\\w*)$/${1:/pascalcase}/}}] = Utils.Context.create();",
      "export default Context;",
      ""
    ]
  },
  "uu5 Css Section": {
    "prefix": "uu5CssSection",
    "scope": "javascript,typescript",
    "body": [
      "//@@viewOn:css",
      "const Css = {",
      "  ${1:main}: (${2}) => Config.Css.css({${3}}),${0}",
      "};",
      "//@@viewOff:css"
    ]
  },
  "uu5 Css Function": {
    "prefix": "uu5CssFunction",
    "scope": "javascript,typescript",
    "body": ["${1:name}: (${2}) => Config.Css.css({${3}}),${0}"]
  },
  "uu5 Log Error": {
    "prefix": "uu5LogError",
    "body": ["${TM_FILENAME_BASE/([\\w]*)\\W?/${1:/pascalcase}/g}.logger.error(`${1:message}`, ${2:error});"]
  },
  "uu5 Log Warning": {
    "prefix": "uu5LogWarning",
    "body": ["${TM_FILENAME_BASE/([\\w]*)\\W?/${1:/pascalcase}/g}.logger.warning(${1:message});"]
  },
  "uu5 Log Info": {
    "prefix": "uu5LogInfo",
    "body": ["${TM_FILENAME_BASE/([\\w]*)\\W?/${1:/pascalcase}/g}.logger.info(${1:message});"]
  },
  "uu5 Log Debug": {
    "prefix": "uu5LogDebug",
    "body": ["${TM_FILENAME_BASE/([\\w]*)\\W?/${1:/pascalcase}/g}.logger.debug(${1:message});"]
  },
  "uu5 Provider": {
    "prefix": "uu5Provider",
    "body": [
      "//@@viewOn:imports",
      "import { createComponent, PropTypes, useDataObject, useEffect, useRef, useMemo } from \"uu5g05\";",
      "import Config from \"./config/config\";",
      "import Calls from \"calls\";",
      "import Context from \"./context\";",
      "import Errors from \"./errors\";",
      "//@@viewOff:imports",
      "",
      "export const Provider = createComponent({",
      "  //@@viewOn:statics",
      "  uu5Tag: Config.TAG + \"Provider\",",
      "  //@@viewOff:statics",
      "",
      "  //@@viewOn:propTypes",
      "  propTypes: {",
      "    baseUri: PropTypes.string.isRequired,",
      "    oid: PropTypes.string.isRequired,${1}",
      "  },",
      "  //@@viewOff:propTypes",
      "",
      "  //@@viewOn:defaultProps",
      "  defaultProps: {${2}},",
      "  //@@viewOff:defaultProps",
      "",
      "  render(props) {",
      "    //@@viewOn:private",
      "    const ${3:${TM_DIRECTORY/.*?(\\w*)$/${1:/camelCase}/}}DataObject = useDataObject({",
      "      handlerMap: {",
      "        load: handleLoad,${4}",
      "      },",
      "    });",
      "",
      "    const prevPropsRef = useRef(props);",
      "",
      "    function handleLoad() {",
      "      if (!props.oid) {",
      "        throw new Errors.NoOidError();",
      "      }",
      "",
      "      const dtoIn = { id: props.oid };",
      "      return Calls.${3/(.*)/${1:/pascalcase}/}.get(dtoIn, props.baseUri);",
      "    }${0}",
      "",
      "    useEffect(() => {",
      "      async function checkPropsAndReload() {",
      "        const prevProps = prevPropsRef.current;",
      "",
      "        if (prevProps.baseUri === props.baseUri && prevPropsRef.current.oid === props.oid) {",
      "          return;",
      "        }",
      "",
      "        if (!${3}DataObject.handlerMap.load) {",
      "          return;",
      "        }",
      "",
      "        try {",
      "          prevPropsRef.current = props;",
      "          await ${3}DataObject.handlerMap.load();",
      "        } catch (error) {",
      "          Provider.logger.error(\"Error while reloading data.\", error);",
      "          prevPropsRef.current = prevProps;",
      "        }",
      "      }",
      "",
      "      checkPropsAndReload();",
      "    }, [props, ${3}DataObject]);",
      "",
      "    const value = useMemo(() => {",
      "      return { ${3}DataObject };",
      "    }, [${3}DataObject]);",
      "    //@@viewOff:private",
      "",
      "    //@@viewOn:render",
      "    return (",
      "      <Context.Provider value={value}>",
      "        {typeof props.children === \"function\" ? props.children(value) : props.children}",
      "      </Context.Provider>",
      "    );",
      "    //@@viewOff:render",
      "  },",
      "});",
      "",
      "//@@viewOn:exports",
      "export default Provider;",
      "//@@viewOff:exports",
      ""
    ]
  },
  "uu5 Split Props": {
    "prefix": "uu5SplitProps",
    "scope": "javascript,typescript",
    "body": ["const [elementProps${1:, otherProps }] = Utils.VisualComponent.splitProps(props${2:, className});${0}"]
  },
  "uu5 Visual Component": {
    "prefix": "uu5VisualComponent",
    "scope": "javascript,typescript",
    "body": [
      "//@@viewOn:imports",
      "import { createVisualComponent, Utils } from \"uu5g05\";",
      "import Config from \"./config/config.js\";",
      "//@@viewOff:imports",
      "",
      "const ${1:${TM_FILENAME_BASE/([\\w]*)\\W?/${1:/pascalcase}/g}} = createVisualComponent({",
      "  //@@viewOn:statics",
      "  uu5Tag: Config.TAG + \"${1}\",",
      "  //@@viewOff:statics",
      "",
      "  //@@viewOn:propTypes",
      "  propTypes: {${2}},",
      "  //@@viewOff:propTypes",
      "",
      "  //@@viewOn:defaultProps",
      "  defaultProps: {${3}},",
      "  //@@viewOff:defaultProps",
      "",
      "  render(props) {",
      "\t//@@viewOn:render",
      "\t${0}",
      "\t//@@viewOff:render",
      "  },",
      "});",
      "",
      "//@@viewOn:exports",
      "export { ${1} };",
      "export default ${1};",
      "//@@viewOff:exports",
      ""
    ]
  }
}
